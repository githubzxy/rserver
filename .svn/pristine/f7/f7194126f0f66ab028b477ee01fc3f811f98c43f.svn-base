package com.enovell.yunwei.km_micor_service.action.productionManage.other.socket;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;

import javax.annotation.Resource;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.enovell.yunwei.km_micor_service.service.productionManage.other.TodoListService;

/**
* @Description: 推送当前待办任务个数
* @date 2019年3月4日  
* @author luoyan
 */
@ServerEndpoint("/socket/todoListSocket/{userId}")
@Component
public class TodoListSocket {
	
	@Resource(name="todoListService")
	private TodoListService todoListService;
	
	private Logger logger = LoggerFactory.getLogger(TodoListSocket.class);
	/**
	 * 存放session和对应的userId
	 */
	private static Map<Session,String> sessionUserIdMap = new ConcurrentHashMap<>();
    /**
     * concurrent包的线程安全Set，用来存放每个客户端对应的RealtimeSocket对象。
     */
    private static CopyOnWriteArraySet<TodoListSocket> copyOnWriteArraySet = new CopyOnWriteArraySet<>();
    /**
     * webSocket的Session，与某个客户端的连接会话，需要通过它来给客户端发送数据
     */
    private Session session;

    /**
     * 客户端连接
     * @param session session
     */
    @OnOpen
    public void onOpen(@PathParam("userId")String userId,Session session){
//    	logger.info("---------userId---------"+userId);
    	sessionUserIdMap.put(session, userId);
        this.session = session;
        //把客户端加入到客户端set中
        copyOnWriteArraySet.add(this);
    }

    /**
     * 客户端关闭
     */
    @OnClose
    public void onClose(Session session){
    	sessionUserIdMap.remove(session);
        //从客户端set中移除关闭的客户端
        copyOnWriteArraySet.remove(this);
    }
    @OnMessage
    public void onMessage(String msg){
//    	logger.info("msg = " + msg);
    	sendMassage();
        
    }
    @OnError
    public void onError(Throwable e, Session session){
//    	logger.info("e = [" + e + "], session = [" + session + "]");
    }
    /**
     * 给所有已连接的客户端发送信息
     * @param msg 发送的信息
     */
    public void sendMassage(){
        for(TodoListSocket socket : copyOnWriteArraySet){
            try {
            	Session s = socket.session;
            	String userId = sessionUserIdMap.get(s);
            	Long count = todoListService.getTodoCount(userId);
            	s.getBasicRemote().sendText(count+"");
//            	logger.info("send msg succees : [userId=" + userId + ",count=" + count + "]");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
