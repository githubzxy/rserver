package com.enovell.yunwei.km_micor_service.service.securityManage.troubleQuery;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.enovell.yunwei.km_micor_service.dto.ResultMsg;
import com.enovell.yunwei.km_micor_service.dto.dayToJobManageDto.TroubleQueryDto;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
@Service("troubleQueryService")
public class TroubleQueryServiceImpl implements TroubleQueryService {
	@Value("${spring.data.mongodb.host}")
	private String mongoHost;
	@Value("${spring.data.mongodb.port}")
	private int mongoPort;
	@Value("${spring.data.mongodb.database}")
	private String mongoDatabase;
	@Value("${createPath}")
	private String createPath;
	@Value("${wordPath}")
	private String troubleTempPath;
	@Override
    public Document findDocumentById(String id, String collectionName) {
        try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
            MongoDatabase md = mc.getDatabase(mongoDatabase);
            FindIterable<Document> findIterable = md.getCollection(collectionName).find(new Document("_id", new ObjectId(id)).append("status",1));
            Document doc = findIterable.first();
            doc.append("docId",doc.getObjectId("_id").toHexString());
            doc.remove("_id");
            return doc;
        }
    }
	 
	@Override
	public long findAllDocumentCount(String collectionName , String startDate, String endDate,String obligationDepart,String troubleLineName,String troubleSite,String troubleGeneral) {
		try(MongoClient mc = new MongoClient(mongoHost,mongoPort)) {
            MongoDatabase md = mc.getDatabase(mongoDatabase);
            Bson filter = getFilter(startDate,endDate,obligationDepart,troubleLineName,troubleSite,troubleGeneral);
            return  md.getCollection(collectionName).count(filter);
        }
	}

	@Override
	public List<Document> findAllDocument(String collectionName , String startDate, String endDate,String obligationDepart,String troubleLineName,String troubleSite,String troubleGeneral, int start, int limit) {
		List<Document> results=new ArrayList<>();
		try(MongoClient mc=new MongoClient(mongoHost,mongoPort)){
			MongoDatabase md=mc.getDatabase(mongoDatabase);
			Bson filter=getFilter(startDate,endDate,obligationDepart,troubleLineName,troubleSite,troubleGeneral);
			FindIterable<Document> findIterable = md.getCollection(collectionName).find(filter).skip(start).limit(limit).sort(new Document("troubleDate", -1));
			findIterable.forEach((Block<? super Document>) results::add);
			 results.stream().forEach(d-> {
		            d.append("docId",d.getObjectId("_id").toHexString());
		            d.remove("_id");
		        });
		}
		return results;
	}
	private Bson getFilter( String startDate, String endDate,String obligationDepart,String troubleLineName,String troubleSite,String troubleGeneral) {
		Bson filters=Filters.eq("status",1);
		filters=Filters.and(filters,Filters.eq("infoResult","2"));
		filters=Filters.and(filters,Filters.eq("troubleFillState","1"));

//		if(StringUtils.isNotBlank(infoResult)) {
//			filters=Filters.and(filters,Filters.eq("infoResult",infoResult));
//		}else{
//			//查询信息：1：事故；2：故障；3：障碍；4：安全隐患
//			filters=Filters.and(filters,Filters.in("infoResult","1","2","3","4"));
//		}
		if(startDate!=null&&!startDate.equals("")){
			filters=Filters.and(filters,Filters.gte("troubleDate", startDate));
		}
		if(endDate!=null&&!endDate.equals("")){
			filters=Filters.and(filters,Filters.lte("troubleDate", endDate));
		}
		if(StringUtils.isNotBlank(obligationDepart)) {
		filters=Filters.and(filters,Filters.eq("troubleObligationDepart",obligationDepart));
	    }
		if(StringUtils.isNotBlank(troubleLineName)) {
			filters=Filters.and(filters,Filters.eq("troubleLineName",troubleLineName));
		}
		if(StringUtils.isNotBlank(troubleSite)) {
			filters=Filters.and(filters,Filters.regex("troubleSite",troubleSite));
		}
		if(StringUtils.isNotBlank(troubleGeneral)) {
			filters=Filters.and(filters,Filters.regex("troubleGeneral",troubleGeneral));
		}
		return filters;
	}
	
	private void insertData(HSSFSheet h, TroubleQueryDto dto) throws IOException{
		h.getRow(2).getCell(0).setCellValue("铁路局：昆明局集团公司            段：昆明通信段       "+"责任部门："+dto.getObligationDepart());
        h.getRow(3).getCell(1).setCellValue(dto.getTroubleLineName());
        h.getRow(3).getCell(3).setCellValue(dto.getTroubleDevice());
        h.getRow(3).getCell(5).setCellValue(dto.getTroubleDate());
        h.getRow(3).getCell(7).setCellValue(dto.getTroubleSite());
        h.getRow(4).getCell(1).setCellValue(dto.getTroubleGeneral());
        h.getRow(5).getCell(1).setCellValue(dto.getTroubleOccurDate());
        h.getRow(5).getCell(3).setCellValue(dto.getTroubleRecoverDate());
        h.getRow(5).getCell(5).setCellValue(dto.getTroubleDelayMinutes());
        h.getRow(5).getCell(7).setCellValue(dto.getTroubleTrainNumber());
        h.getRow(6).getCell(1).setCellValue(dto.getTroubleDisposePass());
        h.getRow(7).getCell(1).setCellValue(dto.getTroubleReasonAnalyse());
        h.getRow(8).getCell(1).setCellValue(dto.getTroubleMeasure());
        h.getRow(9).getCell(1).setCellValue(dto.getTroubleFixDuty());
        h.getRow(10).getCell(1).setCellValue(dto.getTroubleCheckSituation());
        h.getRow(11).getCell(1).setCellValue(dto.getTroubleRemark());
	}

	@Override
	public ResultMsg exportTable(TroubleQueryDto dto) {
		String createTablePath = createPath + System.currentTimeMillis() + ".xls";
    	FileInputStream fis = null;
    	FileOutputStream fos = null;
    	HSSFWorkbook workbook = null;
    	try {
    		fis = new FileInputStream(troubleTempPath+"troubleExport.xls");
			fos = new FileOutputStream(createTablePath);
			workbook =  new HSSFWorkbook(fis);
			HSSFSheet h = workbook.getSheetAt(0);
			insertData(h,dto);
			workbook.write(fos);
//			OutFileUtil.outFile("障碍统计表", workbook, request, response);
//			if (workbook == null) {
//				return "0";// 无数据
//			} else {
//				return "1";// 导出成功
//			}
    	} catch (IOException e) {
			e.printStackTrace();
			return ResultMsg.getFailure("导出失败");//失败
		}finally{
			try{
				fis.close();
				fos.close();
				workbook.close();
			}catch (Exception e) {
				e.printStackTrace();
			}
		}
    	return ResultMsg.getSuccess(createTablePath);
	}
		
}