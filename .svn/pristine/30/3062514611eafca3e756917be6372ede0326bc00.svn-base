package com.enovell.yunwei.km_micor_service.action.technicalManagement.communicationResumeManage;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.bson.Document;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.enovell.yunwei.km_micor_service.dto.ResultMsg;
import com.enovell.yunwei.km_micor_service.dto.communicationResumeManage.TransDwdmDto;
import com.enovell.yunwei.km_micor_service.dto.communicationResumeManage.TransSdhDto;
import com.enovell.yunwei.km_micor_service.service.productionManage.overhaulRecord.OverhaulRecordService;
import com.enovell.yunwei.km_micor_service.service.technical.communicationResumeManage.TransService;
import com.enovell.yunwei.km_micor_service.service.technical.communicationResumeManage.conference.ConferenceService;
import com.enovell.yunwei.km_micor_service.service.technical.communicationResumeManage.dispatch.DispatchService;
import com.enovell.yunwei.km_micor_service.service.technical.communicationResumeManage.wired.WiredService;
import com.enovell.yunwei.km_micor_service.util.communicationResumeManage.ReadExcelTransDwdm;
import com.enovell.yunwei.km_micor_service.util.communicationResumeManage.ReadExcelTransSdh;
/**
 * 
 * 项目名称：km_micor_service
 * 类名称：ImportAction   
 * 类描述:  通信履历公共导入excel文件入口，不同模块导入方法具体实现不同
 * 创建人：zhouxingyu
 * 创建时间：2019年6月19日 下午4:22:15
 * 修改人：zhouxingyu 
 * 修改时间：2019年6月19日 下午4:22:15   
 *
 */
@RestController
@RequestMapping("/importAction")
public class ImportAction {
	@Resource(name = "transService")
	private TransService transService;//传输与接入网
//	@Resource(name = "tatService")
//	private TatService tatService;
//	@Resource(name = "videoService")
//	private VideoService videoService;
//	@Resource(name = "wirelessService")
//	private WirelessService wirelessService;
	@Resource(name = "wiredService")
	private WiredService wiredService;
//	@Resource(name = "conferenceService")
//	private ConferenceService conferenceService;
//	@Resource(name = "dataService")
//	private DataService dataService;
	@Resource(name = "dispatchService")
	private DispatchService dispatchService;
//	@Resource(name = "lineService")
//	private LineService lineService;
	@Resource(name = "conferenceService")
	private ConferenceService conferenceService;
	@Resource(name = "overhaulRecordService")
	private OverhaulRecordService overhaulService;
	// 车间下拉选
	@PostMapping("/getCadreAndShop")
	public List<Map<String, String>> getCadreAndShop() {
		List<String> cjList = transService.getCadreAndShop();
		List<Map<String, String>> cjDatas = new ArrayList<>();
		for (String string : cjList) {
			Map<String, String> map = new HashMap();
			map.put("text", string);
			map.put("value", string);
			cjDatas.add(map);
		}
		return cjDatas;
	}

	//导入Excel
	@RequestMapping("/Import")
	@ResponseBody
	public ResultMsg Import(
			@RequestParam(name="file_excel",required=false) MultipartFile file,
			@RequestParam(name="userId",required=false) String userId,
			@RequestParam(name="orgId",required=false) String orgId,
			@RequestParam(name="orgType",required=false) String orgType,
			@RequestParam(name="publicType",required=false) String publicType,
			HttpServletRequest request,
			HttpServletResponse response
			) throws IOException{
    	try {
    		
//    		if("trans_dwdm".equals(publicType)){
//    			return importTransDwdm(publicType,file,userId,orgId);
//    		}
//    		if("trans_sdh".equals(publicType)){
//    			return importTransSdh(publicType,file,userId,orgId);
//    		}

    		//传输与接入网
//    		if("trans_dwdm".equals(publicType)){
////    			return importTransDwdm(publicType,file,userId,orgId);
//    			transService.importTransDwdm(publicType,file,userId,orgId);
//    		}
//    		if("trans_sdh".equals(publicType)){
////    			return importTransSdh(publicType,file,userId,orgId);
//    			transService.importTransSdh(publicType,file,userId,orgId);
//    		}
//    		if("trans_numberTrans".equals(publicType)){
//    			transService.importTransNumberTrans(publicType,file,userId,orgId);
//    		}
//    		if("trans_other".equals(publicType)){
//    			transService.importTransOther(publicType,file,userId,orgId);
//    		}
//    		if("trans_otn".equals(publicType)){
//    			transService.importTransOtn(publicType,file,userId,orgId);
//    		}
//    		
//    		//电报及电话系统
//    		if("tat_spc".equals(publicType)){
//    			tatService.importTatSpc(publicType,file,userId,orgId);
//    		}
//    		if("tat_other".equals(publicType)){
//    			tatService.importTatOther(publicType,file,userId,orgId);
//    		}
//    		
//    		//视频监控类
//    		if("video_video".equals(publicType)){
//    			videoService.importVideoVideo(publicType,file,userId,orgId);
//    		}
//    		if("video_irontower".equals(publicType)){
//    			videoService.importVideoIrontower(publicType,file,userId,orgId);
//    		}
//    		if("video_vidicon".equals(publicType)){
//    			videoService.importVideoVidicon(publicType,file,userId,orgId);
//    		}
//    		
//    		//无线类
//    		if("wireless_wireless".equals(publicType)){
//    			wirelessService.importWirelessWireless(publicType,file,userId,orgId);
//    		}
//    		if("wireless_cable".equals(publicType)){
//    			wirelessService.importWirelessCable(publicType,file,userId,orgId);
//    		}
//    		if("wireless_radio".equals(publicType)){
//    			wirelessService.importWirelessRadio(publicType,file,userId,orgId);
//    		}
//    		if("wireless_irontower".equals(publicType)){
//    			wirelessService.importWirelessIrontower(publicType,file,userId,orgId);
//    		}
//    		if("wireless_mobile".equals(publicType)){
//    			wirelessService.importWirelessMobile(publicType,file,userId,orgId);
//    		}
//    		if("wireless_hand".equals(publicType)){
//    			wirelessService.importWirelessHand(publicType,file,userId,orgId);
//    		}
//    		
//    		//有线类
//    		if("wired_wired".equals(publicType)){
//    			wiredService.importWiredWired(publicType,file,userId,orgId);
//    		}
//    		
//    		//会议系统
//    		if("conference_mcu".equals(publicType)){
//    			conferenceService.importConferenceMcu(publicType,file,userId,orgId);
//    		}
//    		if("conference_other".equals(publicType)){
//    			conferenceService.importConferenceOther(publicType,file,userId,orgId);
//    		}
//    		
//    		//数据通信系统
//    		if("data_router".equals(publicType)){
//    			dataService.importDataRouter(publicType,file,userId,orgId);
//    		}
//    		if("data_changer".equals(publicType)){
//    			dataService.importDataChanger(publicType,file,userId,orgId);
//    		}
//    		if("data_other".equals(publicType)){
//    			dataService.importDataOther(publicType,file,userId,orgId);
//    		}
//    		
    		//调度通信系统
    		if("dispatch_trunk".equals(publicType)){
    			return dispatchService.importDispatchTrunk(publicType,file,userId,orgId);
    		}
    		if("dispatch_dispatchChanger".equals(publicType)){
    			return dispatchService.importDispatchDispatchChanger(publicType,file,userId,orgId);
    		}
    		if("dispatch_stationChanger".equals(publicType)){
    			return dispatchService.importDispatchStationChanger(publicType,file,userId,orgId);
    		}
    		if("dispatch_duty".equals(publicType)){
    			return dispatchService.importDispatchDuty(publicType,file,userId,orgId);
    		}
    		if("dispatch_other".equals(publicType)){
    			return dispatchService.importDispatchOther(publicType,file,userId,orgId);
    		}
    		if("dispatch_station".equals(publicType)){
    			return dispatchService.importDispatchStation(publicType,file,userId,orgId);
    		}
//    		
//    		//通信线路系统
//    		if("line_light".equals(publicType)){
//    			lineService.importLineLight(publicType,file,userId,orgId);
//    		}
//    		if("line_electricity".equals(publicType)){
//    			lineService.importLineElectricity(publicType,file,userId,orgId);
//    		}
//    		if("line_line".equals(publicType)){
//    			lineService.importLineLine(publicType,file,userId,orgId);
//    		}
//    		if("line_lineAndLight".equals(publicType)){
//    			lineService.importLineLineAndLight(publicType,file,userId,orgId);
//    		}
//    		if("line_pipeline".equals(publicType)){
//    			lineService.importLinePipeline(publicType,file,userId,orgId);
//    		}
//    		if("line_hole".equals(publicType)){
//    			lineService.importLineHole(publicType,file,userId,orgId);
//    		}
//    		if("line_other".equals(publicType)){
//    			lineService.importLineOther(publicType,file,userId,orgId);
//    		}
    		

    		else if ("wired_wired".equals(publicType)) {
    			return wiredService.importWiredWired(publicType,file,userId,orgId);
			}
    		else if ("conference_mcu".equals(publicType)) {
    			return conferenceService.importConferenceMcu(publicType,file,userId,orgId);
			}
    		else if ("conference_other".equals(publicType)) {
    			return conferenceService.importConferenceOther(publicType,file,userId,orgId);
			}
    		return ResultMsg.getFailure("该模板还没做");
			 
		} catch (Exception e) {
	    	 return ResultMsg.getFailure("导入失败");
		}
	}
//    private ResultMsg importTransDwdm(String publicType, MultipartFile file, String userId, String orgId) {
//    	ReadExcelTransDwdm readExcel =new ReadExcelTransDwdm();
//    	List<TransDwdmDto> fdpList = readExcel.getExcelInfo(file);
//    	//查询一遍数据库中的所有数据用于和表格中的数据比较
//    	List<Document> listAll = transService.getAllDocumentByPublicType("deviceRecord",publicType);
//    	//存放数据来源于导入的数据的id,用于新导入时删除上一次导入数据
//    	List<String> reatList = new ArrayList<String>();
//    	//表格中的数据和数据库中的数据做比较，将数据库中相同的数据中存放在新list中
//    	listAll.stream().forEach(s->{
//		//判断导入名称和数据库中的劳资号是否匹配，如果匹配将对应的id放入list中
//    		if(StringUtils.isNotBlank((String) s.get("source"))==false){
//    			reatList.add((String)s.get("docId"));
//    		}
//    	});
////    	 删除数据库中来源为上一次导入的数据
//   	    transService.removeDocument(reatList, "deviceRecord");
//    	System.out.println("===================");
//    	reatList.forEach(System.out::println);
//    	//验证表格中的必填数据是否有空
//    	Map<String, Object> checkNullMap = checkNullRow(fdpList);
//    	Map<String, Object> checkCjMap = checkWorkshopAndWorkArea(fdpList);
//    	if((boolean) checkNullMap.get("isNull")==false){
//    		return (ResultMsg) checkNullMap.get("ResultMsg");
//    	}
//    	//验证填写的车间工区是否正确
//    	else if((boolean) checkCjMap.get("isExist")==false) {
//    		return (ResultMsg) checkCjMap.get("ResultMsg");
//    	}else {
//    		fdpList.stream().forEach(s->{
//		    	    String collectionName ="deviceRecord";
//		    	    Document document = new Document();
//		    	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		    		String creatDateStr = "";
//		    		try {
//		    			creatDateStr = sdf.format(new Date());
//		    		} catch (Exception e) {
//		    			e.printStackTrace();
//		    		}
//		    		document.put("creatDateStr", creatDateStr);
//		    		document.put("publicType", publicType);
////		    		document.put("source", "1");
//		    		
//		    		document.put("workshop", s.getWorkshop());
//		    		document.put("workArea", s.getWorkArea());
//		    		document.put("combinationClass", s.getCombinationClass());
//		    		document.put("deviceClass", s.getDeviceClass()); 
//		    		document.put("systemName", s.getSystemName());
//		    		document.put("deviceCode", s.getDeviceCode());
//		    		document.put("deviceName", s.getDeviceName());
//		    		document.put("deviceId", s.getDeviceId());
//		    		document.put("site_station_line", s.getSite_station_line());
//		    		document.put("site_station_name", s.getSite_station_name()); 
//		    		document.put("site_station_place", s.getSite_station_place());
//		    		document.put("site_range_line", s.getSite_range_line());
//		    		document.put("site_range_post", s.getSite_range_post());
//		    		document.put("site_range_place", s.getSite_range_place()); 
//		    		document.put("site_other_line", s.getSite_other_line());
//		    		document.put("site_other_place", s.getSite_other_place());
//		    		document.put("site_machineRoomCode", s.getSite_machineRoomCode());
//		    		document.put("assetOwnership", s.getAssetOwnership());
//		    		document.put("ownershipUnitName", s.getOwnershipUnitName());
//		    		document.put("ownershipUnitCode", s.getOwnershipUnitCode()); 
//		    		document.put("maintainBody", s.getMaintainBody()); 
//		    		document.put("maintainUnitName", s.getMaintainUnitName()); 
//		    		document.put("maintainUnitCode", s.getMaintainUnitCode()); 
//		    		document.put("manufacturers", s.getManufacturers()); 
//		    		document.put("deviceType", s.getDeviceType()); 
//		    		document.put("useUnit", s.getUseUnit()); 
//		    		document.put("totalCapacity", s.getTotalCapacity()); 
//		    		document.put("roadCapacity", s.getRoadCapacity()); 
//		    		document.put("configChannel", s.getConfigChannel()); 
//		    		document.put("assetRatio", s.getAssetRatio()); 
//		    		document.put("productionDate", s.getProductionDate()); 
//		    		document.put("useDate", s.getUseDate()); 
//		    		document.put("deviceOperationStatus", s.getDeviceOperationStatus()); 
//		    		document.put("stopDate", s.getStopDate()); 
//		    		document.put("scrapDate", s.getScrapDate()); 
//		    		document.put("fixedAssetsCode", s.getFixedAssetsCode()); 
//		    		document.put("remark", s.getRemark());
//		    		
//		    		document.put("userId", userId);
//		    		document.put("orgId", orgId);
//				    transService.addDocument(document,collectionName);
//	    	 });
////	    	 //删除数据库中来源为上一次导入的数据
////	    	 transService.removeDocument(reatList, "deviceRecord");
//	    	 return ResultMsg.getSuccess("导入成功");
//    	}
//	}
//    /**
//	 * 验证导入数据中的必填项是否有未填列
//	 * @return 
//	 */
//	public Map<String,Object> checkNullRow(List<TransDwdmDto> fdpList) {
//	 Map<String, Object> map = new HashMap<String, Object>();
//     //检验每一必填列数据中是否有未填，默认为true
//   	 boolean workshopNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getWorkshop())==false);
//   	 boolean workAreaNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getWorkArea())==false);
//   	 boolean combinationClassNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getCombinationClass())==false);
//   	 boolean deviceClassNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceClass())==false);
//   	 boolean systemNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getSystemName())==false);
//   	 boolean deviceNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceName())==false);
//   	 boolean deviceIdNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceId())==false);
//   	 boolean site_machineRoomCodeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getSite_machineRoomCode())==false);
//   	 boolean assetOwnershipNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getAssetOwnership())==false);
//   	 boolean ownershipUnitNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getOwnershipUnitName())==false);
//   	 boolean ownershipUnitCodeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getOwnershipUnitCode())==false);
//   	 boolean maintainBodyNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getMaintainBody())==false);
//   	 boolean maintainUnitNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getMaintainUnitName())==false);
//   	 boolean maintainUnitCodeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getMaintainUnitCode())==false);
//   	 boolean manufacturers =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getManufacturers())==false);
//   	 boolean deviceTypeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceType())==false);
//   	 boolean configChannelNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getConfigChannel())==false);
//   	 boolean useDateNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getUseDate())==false);
//   	 boolean deviceOperationStatusNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceOperationStatus())==false);
//   	 
//   	 if(workshopNull==true) {
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'车间'列是否有空白格"));
//   		return map; 
//   	 }else if(workAreaNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'班组'列是否有空白格"));
//   		return map;
//   	 }else if(combinationClassNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'组合分类'列是否有空白格"));
//   		return map;
//   	 }else if(deviceClassNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备分类'列是否有空白格"));
//   		return map;
//   	 }else if(systemNameNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'系统名称'列是否有空白格"));
//   		return map;
//   	 }else if(deviceNameNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备名称'列是否有空白格"));
//   		return map;
//   	 }else if(deviceIdNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备ID'列是否有空白格"));
//   		return map;
//   	 }else if(site_machineRoomCodeNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'机房、接入点编码'列是否有空白格"));
//   		return map;
//   	 }else if(assetOwnershipNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'资产归属'列是否有空白格"));
//   		return map;
//   	 }else if(ownershipUnitNameNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'权属单位名称'列是否有空白格"));
//   		return map;
//   	 }else if(ownershipUnitCodeNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'权属单位编码'列是否有空白格"));
//   		return map;
//   	 }else if(maintainBodyNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'维护主体'列是否有空白格"));
//   		return map;
//   	 }else if(maintainUnitNameNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'维护单位名称'列是否有空白格"));
//   		return map;
//   	 }else if(maintainUnitCodeNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'维护单位编码'列是否有空白格"));
//   		return map;
//   	 }else if(manufacturers==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备厂家'列是否有空白格"));
//   		return map;
//   	 }else if(deviceTypeNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备型号'列是否有空白格"));
//   		return map;
//   	 }else if(configChannelNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'配置波道'列是否有空白格"));
//   		return map;
//   	 }else if(useDateNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'使用日期'列是否有空白格"));
//   		return map;
//   	 }else if(deviceOperationStatusNull==true){
//   		map.put("isNull", false);
//   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备运行状态'列是否有空白格"));
//   		return map;
//   	 }else {
//   		map.put("isNull", true);
//   		return map; 
//   	 }
//	}
//	//验证车间是否为系统中数据，工区是否在车间下
//	public Map<String,Object> checkWorkshopAndWorkArea(List<TransDwdmDto> fdpList) {
//		 Map<String, Object> map = new HashMap<String, Object>();
//        //获取所有车间
//		List<String> cjList = transService.getCadreAndShop();
//	    //workshopCheck为true时，导入的车间全在系统中
//	   	boolean workshopCheck =fdpList.stream().allMatch(f->(cjList.contains( f.getWorkshop())==true));
//        //判断导入的工区是否在导入的车间下
//	   	boolean workAreaCheck =fdpList.stream().allMatch(f->(overhaulService.getWorAreasByName(f.getWorkshop()).contains( f.getWorkArea())==true));
//		if(workshopCheck==false){
//			map.put("isExist", false);
//	   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'车间'列数据是否按系统填写"));
//	   		return map;	
//		}
//		else if(workAreaCheck==false){
//			map.put("isExist", false);
//	   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'班组'列数据是否全部属于对应车间"));
//	   		return map;	
//		}
//		else {
//			map.put("isExist", true);
//			return map;
//		}
//	}
//	private ResultMsg importTransSdh(String publicType, MultipartFile file, String userId, String orgId) {
//    	ReadExcelTransSdh readExcel =new ReadExcelTransSdh();
//    	List<TransSdhDto> fdpList = readExcel.getExcelInfo(file);
//    	//查询一遍数据库中的所有数据用于和表格中的数据比较
//    	List<Document> listAll = transService.getAllDocumentByPublicType("deviceRecord",publicType);
//    	//存放数据来源于导入的数据的id,用于新导入时删除上一次导入数据
//    	List<String> reatList = new ArrayList<String>();
//		//表格中的数据和数据库中的数据做比较，将数据库中相同的数据中存放在新list中
//    	listAll.stream().forEach(s->{
//    		//
//    		if(StringUtils.isNotBlank((String) s.get("source"))==false){
//    			reatList.add((String)s.get("docId"));
//    		}
//    	});
//    	 //删除数据库中来源为上一次导入的数据
//   	    transService.removeDocument(reatList, "deviceRecord");
//    	//验证表格中的必填数据是否有空
//    	Map<String, Object> checkNullMap = checkTransSdhDtoNullRow(fdpList);
//    	Map<String, Object> checkCjMap = checkTransSdhDtoWorkshopAndWorkArea(fdpList);
//    	if((boolean) checkNullMap.get("isNull")==false){
//    		return (ResultMsg) checkNullMap.get("ResultMsg");
//    	}
//    	//验证填写的车间工区是否正确
//    	else if((boolean) checkCjMap.get("isExist")==false) {
//    		return (ResultMsg) checkCjMap.get("ResultMsg");
//    	}else {
//	    	 fdpList.stream().forEach(s->{
//		    	    String collectionName ="deviceRecord";
//		    	    Document document = new Document();
//		    	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		    		String creatDateStr = "";
//		    		try {
//		    			creatDateStr = sdf.format(new Date());
//		    		} catch (Exception e) {
//		    			e.printStackTrace();
//		    		}
//		    		document.put("creatDateStr", creatDateStr);
//		    		document.put("publicType", publicType);
////		    		document.put("source", "1");
//		    		
//		    		document.put("workshop", s.getWorkshop());
//		    		document.put("workArea", s.getWorkArea());
//		    		document.put("combinationClass", s.getCombinationClass());
//		    		document.put("deviceClass", s.getDeviceClass()); 
//		    		document.put("deviceCode", s.getDeviceCode());
//		    		document.put("deviceName", s.getDeviceName());
//		    		document.put("deviceId", s.getDeviceId());
//		    		document.put("systemName", s.getSystemName());
//		    		document.put("site_station_line", s.getSite_station_line());
//		    		document.put("site_station_name", s.getSite_station_name()); 
//		    		document.put("site_station_place", s.getSite_station_place());
//		    		document.put("site_range_line", s.getSite_range_line());
//		    		document.put("site_range_post", s.getSite_range_post());
//		    		document.put("site_range_place", s.getSite_range_place()); 
//		    		document.put("site_other_line", s.getSite_other_line());
//		    		document.put("site_other_place", s.getSite_other_place());
//		    		document.put("site_machineRoomCode", s.getSite_machineRoomCode());
//		    		document.put("assetOwnership", s.getAssetOwnership());
//		    		document.put("ownershipUnitName", s.getOwnershipUnitName());
//		    		document.put("ownershipUnitCode", s.getOwnershipUnitCode()); 
//		    		document.put("maintainBody", s.getMaintainBody()); 
//		    		document.put("maintainUnitName", s.getMaintainUnitName()); 
//		    		document.put("maintainUnitCode", s.getMaintainUnitCode()); 
//		    		document.put("manufacturers", s.getManufacturers()); 
//		    		document.put("deviceType", s.getDeviceType()); 
//		    		document.put("useUnit", s.getUseUnit()); 
//		    		document.put("totalCapacity", s.getTotalCapacity()); 
//		    		document.put("roadCapacity", s.getRoadCapacity()); 
//		    		document.put("assetRatio", s.getAssetRatio()); 
//		    		document.put("productionDate", s.getProductionDate()); 
//		    		document.put("useDate", s.getUseDate()); 
//		    		document.put("deviceOperationStatus", s.getDeviceOperationStatus()); 
//		    		document.put("stopDate", s.getStopDate()); 
//		    		document.put("scrapDate", s.getScrapDate()); 
//		    		document.put("fixedAssetsCode", s.getFixedAssetsCode()); 
//		    		document.put("remark", s.getRemark());
//		    		
//		    		document.put("userId", userId);
//		    		document.put("orgId", orgId);
//				    transService.addDocument(document,collectionName);
//	    	 });
////	    	 //删除数据库中来源为上一次导入的数据
////	    	 transService.removeDocument(reatList, "deviceRecord");
//	    	 return ResultMsg.getSuccess("导入成功");
//    	}
//	}
//    public Map<String,Object> checkTransSdhDtoNullRow(List<TransSdhDto> fdpList) {
//    	Map<String, Object> map = new HashMap<String, Object>();
//        //检验每一必填列数据中是否有未填，默认为true
//      	 boolean workshopNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getWorkshop())==false);
//      	 boolean workAreaNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getWorkArea())==false);
//      	 boolean combinationClassNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getCombinationClass())==false);
//      	 boolean deviceClassNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceClass())==false);
//      	 boolean deviceNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceName())==false);
//      	 boolean deviceIdNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceId())==false);
//      	 boolean systemNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getSystemName())==false);
//      	 boolean site_machineRoomCodeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getSite_machineRoomCode())==false);
//      	 boolean assetOwnershipNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getAssetOwnership())==false);
//      	 boolean ownershipUnitNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getOwnershipUnitName())==false);
//      	 boolean ownershipUnitCodeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getOwnershipUnitCode())==false);
//      	 boolean maintainBodyNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getMaintainBody())==false);
//      	 boolean maintainUnitNameNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getMaintainUnitName())==false);
//      	 boolean maintainUnitCodeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getMaintainUnitCode())==false);
//      	 boolean manufacturers =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getManufacturers())==false);
//      	 boolean deviceTypeNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceType())==false);
//      	 boolean useDateNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getUseDate())==false);
//      	 boolean deviceOperationStatusNull =fdpList.stream().anyMatch(f->StringUtils.isNotBlank(f.getDeviceOperationStatus())==false);
//      	 
//      	 if(workshopNull==true) {
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'车间'列是否有空白格"));
//      		return map; 
//      	 }else if(workAreaNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'班组'列是否有空白格"));
//      		return map;
//      	 }else if(combinationClassNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'组合分类'列是否有空白格"));
//      		return map;
//      	 }else if(deviceClassNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备分类'列是否有空白格"));
//      		return map;
//      	 }else if(deviceNameNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备名称'列是否有空白格"));
//      		return map;
//      	 }else if(deviceIdNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备ID'列是否有空白格"));
//      		return map;
//      	 }else if(systemNameNull==true){
//       		map.put("isNull", false);
//       		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'系统名称'列是否有空白格"));
//       		return map;
//       	 }else if(site_machineRoomCodeNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'机房、接入点编码'列是否有空白格"));
//      		return map;
//      	 }else if(assetOwnershipNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'资产归属'列是否有空白格"));
//      		return map;
//      	 }else if(ownershipUnitNameNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'权属单位名称'列是否有空白格"));
//      		return map;
//      	 }else if(ownershipUnitCodeNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'权属单位编码'列是否有空白格"));
//      		return map;
//      	 }else if(maintainBodyNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'维护主体'列是否有空白格"));
//      		return map;
//      	 }else if(maintainUnitNameNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'维护单位名称'列是否有空白格"));
//      		return map;
//      	 }else if(maintainUnitCodeNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'维护单位编码'列是否有空白格"));
//      		return map;
//      	 }else if(manufacturers==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备厂家'列是否有空白格"));
//      		return map;
//      	 }else if(deviceTypeNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备型号'列是否有空白格"));
//      		return map;
//      	 }else if(useDateNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'使用日期'列是否有空白格"));
//      		return map;
//      	 }else if(deviceOperationStatusNull==true){
//      		map.put("isNull", false);
//      		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'设备运行状态'列是否有空白格"));
//      		return map;
//      	 }else {
//      		map.put("isNull", true);
//      		return map; 
//      	 }
//   	}
//    //验证车间是否为系统中数据，工区是否在车间下
//  	public Map<String,Object> checkTransSdhDtoWorkshopAndWorkArea(List<TransSdhDto> fdpList) {
//  		Map<String, Object> map = new HashMap<String, Object>();
//  		//获取所有车间
//  		List<String> cjList = transService.getCadreAndShop();
//  	    //workshopCheck为true时，导入的车间全在系统中
//  	   	boolean workshopCheck =fdpList.stream().allMatch(f->(cjList.contains( f.getWorkshop())==true));
//  	   	//判断导入的工区是否在导入的车间下
//  	   	boolean workAreaCheck =fdpList.stream().allMatch(f->(overhaulService.getWorAreasByName(f.getWorkshop()).contains( f.getWorkArea())==true));
//  		if(workshopCheck==false){
//  			map.put("isExist", false);
//  	   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'车间'列数据是否按系统填写"));
//  	   		return map;	
//  		}
//  		else if(workAreaCheck==false){
//  			map.put("isExist", false);
//  	   		map.put("ResultMsg", ResultMsg.getFailure("导入失败!请检查'班组'列数据是否全部属于对应车间"));
//  	   		return map;	
//  		}
//  		else {
//  			map.put("isExist", true);
//  			return map;
//  		}
//  	}
	
}