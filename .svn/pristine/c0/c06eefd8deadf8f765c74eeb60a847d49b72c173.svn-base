package com.enovell.yunwei.km_micor_service.service.productionManage.taskManage;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;

import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
@Service("taskWorkshopReplyService")
public class TaskWorkshopReplyServiceImpl implements  TaskWorkshopReplyService{
	
	@Value("${spring.data.mongodb.host}")
    private String mongoHost;
    @Value("${spring.data.mongodb.port}")
    private int mongoPort;
    @Value("${spring.data.mongodb.database}")
    private String mongoDatabase;
    @Value("${user.uploadPath}")
    private String uploadPath;
    @Resource(name = "taskApplyService")
    private TaskApplyService taskApplyService;
    @Autowired
	 private NamedParameterJdbcTemplate template;

	@Override
	public long findAllDocumentCount(String collectionName, String docId, String orgId, String currentDay, String workOrderName, String systemType, String flowState, String startUploadDate, String endUploadDate) {
		 try(MongoClient mc = new MongoClient(mongoHost,mongoPort)) {
	            MongoDatabase md = mc.getDatabase(mongoDatabase);
	            Bson filter = getFilter(docId, orgId, currentDay, workOrderName, systemType, flowState, startUploadDate, endUploadDate);
	            return  md.getCollection(collectionName).count(filter);
	        }
	}

	@Override
	public List<Document> findAllDocument(String collectionName, String docId, String orgId, String currentDay, String workOrderName, String systemType, String flowState, String startUploadDate, String endUploadDate, int start, int limit) {
		 List<Document> results = new ArrayList<>();
	        try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
	            MongoDatabase md = mc.getDatabase(mongoDatabase);
	            Bson filter = getFilter(docId, orgId, currentDay, workOrderName, systemType, flowState, startUploadDate,endUploadDate);
	            FindIterable<Document> findIterable = md.getCollection(collectionName).find(filter).skip(start).limit(limit).sort(new Document("issueDate", -1));
	            findIterable.forEach((Block<? super Document>) results::add);
	        }
	        results.stream().forEach(d-> {
	            d.append("docId",d.getString("docId"));
	            d.append("WorkshopReplyAndDistributeTime",d.get("workshopReply")+","+d.get("distributeTime"));
	            d.remove("_id");
	        });
	        return results;
	}

	@Override
	public Document findDocumentById(String id, String executiveOrgId, String collectionName) {
		try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
            MongoDatabase md = mc.getDatabase(mongoDatabase);
            FindIterable<Document> findIterable = md.getCollection(collectionName).find(new Document("docId", id).append("executiveOrgId", executiveOrgId).append("status",1));
            Document doc = findIterable.first();
            doc.append("docId",doc.getString("docId"));
            doc.remove("_id");
            return doc;
        }
	}

	@Override
	public Document updateDocument(Document doc, String collectionName, String flowState) {
		  try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
			  
			  if("7".equals(flowState)){
				  addIssueData(doc);
			  }
			  
	            MongoDatabase md = mc.getDatabase(mongoDatabase);
	            Bson filter =  Filters.eq("docId", doc.getString("docId"));
	            filter = Filters.and(filter,Filters.eq("executiveOrgId",doc.getString("executiveOrgId")));
	            return md.getCollection(collectionName)
	                    .findOneAndUpdate(
	                    		filter,new Document("$set",doc)
	                    );
	        }
	}
	
	private void addIssueData(Document doc){
		String distributeWorkAreaId = doc.getString("distributeWorkAreaId");
		String distributeWorkAreaName = doc.getString("distributeWorkAreaName");
		String[] distributeWorkAreaIds = distributeWorkAreaId.split(",");
		String[] distributeWorkAreaNames = distributeWorkAreaName.split(",");
		for(int i=0 ; i<distributeWorkAreaIds.length ; i++){
			Document document = new Document();
			document.put("docId", doc.getString("docId"));
			document.put("executiveOrgId", doc.getString("executiveOrgId"));
			document.put("taskName", doc.getString("taskName"));
			document.put("systemType", doc.getString("systemType"));
			document.put("distributeDate", doc.getString("distributeTime"));
			document.put("flowState", doc.getString("flowState"));
			document.put("distributeOrgId", distributeWorkAreaIds[i]);
			document.put("distributeOrgName", distributeWorkAreaNames[i]);
			addDocument(document);
		}
	}
	
	private void addDocument(Document doc) {
		  try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
	            MongoDatabase md = mc.getDatabase(mongoDatabase);
	            doc.append("status",1);
	            md.getCollection("IssueTaskOfWorkArea").insertOne(doc);
	        }
	}

	/**
	 * 分页查询条件封装
	 * @param orgId 登录用户组织机构ID
	 * @param currentDay 当前日期字符串
	 * @param workOrderName 电路工单名称
	 * @param flowState 流程状态
	 * @param startUploadDate 开始时间
	 * @param endUploadDate 结束时间
	 * @return 查询条件 Bson
	 */
    private Bson getFilter(String docId, String orgId, String currentDay, String workOrderName, String systemType, String flowState, String startUploadDate, String endUploadDate) {
        Bson filter = Filters.eq("status",1);
        if(StringUtils.isNotBlank(docId)){
        	filter = Filters.and(filter,Filters.eq("docId",docId));
        }
        if(StringUtils.isNotBlank(workOrderName)){
        	filter = Filters.and(filter,Filters.regex("taskName",workOrderName));
        }
        if(StringUtils.isNotBlank(systemType)){
        	filter = Filters.and(filter,Filters.eq("systemType",systemType));
        }
        if(StringUtils.isNotBlank(flowState)){
        	filter = Filters.and(filter,Filters.eq("flowState",flowState));
        }
        if(StringUtils.isNotBlank(startUploadDate)){
            filter = Filters.and(filter,Filters.gte("issueDate",startUploadDate));
        }
        if(StringUtils.isNotBlank(endUploadDate)){
            filter = Filters.and(filter,Filters.lte("issueDate",endUploadDate));
        }
//        filter = Filters.and(filter,Filters.in("summaryDate",currentDay,""));//当前系统日期与汇总日期相同或者汇总日期为空
//        filter = Filters.and(filter,Filters.in("summaryPersonId",userId,""));//当前登陆用户ID与汇总人ID相同或者汇总人ID为空
//        filter = Filters.and(filter,Filters.eq("createUserId",userId));//表示查询的是当前登陆用户的数据
        
//        filter = Filters.and(filter,Filters.nin("flowState","0","1","2","3","4"));
//        filter = Filters.and(filter,Filters.in("flowState","5"));
        if(StringUtils.isNotBlank(orgId)){
        	filter = Filters.and(filter,Filters.eq("executiveOrgId",orgId));//当前登陆用户组织机构ID与该字段相同的
        }
        return filter;
    }

	@Override
	public void setFlowState(String docId,String collectionName) {
		List<Document> results = new ArrayList<>();
        try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
            MongoDatabase md = mc.getDatabase(mongoDatabase);
            Bson filter = Filters.eq("status",1);
            filter = Filters.and(filter,Filters.eq("docId",docId));
//            Bson filter = getFilter(orgId, currentDay, workOrderName, flowState, startUploadDate,endUploadDate);
            FindIterable<Document> findIterable = md.getCollection(collectionName).find(filter);
            findIterable.forEach((Block<? super Document>) results::add);
        }
        results.stream().forEach(d-> {
            d.append("docId",d.getString("docId"));
            d.remove("_id");
        });
        
        int count = 0;
        for(int i = 0 ; i<results.size() ; i++){
        	String flowState = results.get(i).getString("flowState");
        	if("8".equals(flowState)){
        		count=count+1;
        	}
        }
        if(count==results.size()){
//        	for(int i = 0 ; i<results.size() ; i++){
//        		Document document = findDocumentById(results.get(i).getString("docId"),collectionName);
//        		document.put("flowState", "-1");
//        		updateDocument(document,collectionName,"");
//            }
        	Document document = taskApplyService.findDocumentById(results.get(0).getString("docId"),"task");
        	document.put("flowState", "-1");
        	taskApplyService.updateDocument(document, "task");
        }
		
	}
	
	@Override
	public List<Map<String, Object>> getDeparts(String workShopName) {
		String sql="select t.org_id_,t.org_name_ from cfg_base_organization t where t.parent_id_=:workShopName";
		Map<String,Object> paramMap = new HashMap<String,Object>();
        paramMap.put("workShopName", workShopName);
        List<Map<String, Object>> departList=template.query(sql, paramMap,new departOrganizationMapper());
		return departList;
	}
}

class departOrganizationMapper implements RowMapper<Map<String, Object>> {

	public Map<String, Object> mapRow(ResultSet rs, int idx) throws SQLException {
		Map<String, Object> p = new HashMap<String, Object>();
		p.put("value", rs.getString("ORG_ID_"));
		p.put("text", rs.getString("ORG_NAME_"));
		return p;
	}

}