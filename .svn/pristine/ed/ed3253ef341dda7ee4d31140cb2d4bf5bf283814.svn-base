package com.enovell.yunwei.km_micor_service.action.integratedManage.attendanceManage;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.bson.Document;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.enovell.yunwei.km_micor_service.dto.GridDto;
import com.enovell.yunwei.km_micor_service.dto.ResultMsg;
import com.enovell.yunwei.km_micor_service.service.integratedManage.attendanceManage.AttendanceManageCollectService;
import com.mongodb.DBObject;
import com.mongodb.util.JSON;

/**
 * kunmingTXD
 * 昆明微服务考勤管理填写Action
 *
 * @author yangsy
 * @date 19-3-29
 */
@RestController
@RequestMapping("/attendanceManageCollectAction")
public class AttendanceManageCollectAction {
	@Resource(name = "attendanceManageCollectService")
    private AttendanceManageCollectService service;
	
	@PostMapping("/getUsersByOrgId")
    public GridDto<Document> getUsersByOrgId(
    		@RequestParam("orgId") String orgId,
    		@RequestParam("collectionName") String collectionName,
    		@RequestParam("attendanceManage") String attendanceManage,
    		@RequestParam("date") String date,
    		@RequestParam int start, @RequestParam int limit) {
		GridDto<Document> result = new GridDto<>();
        result.setResults(service.getUsersCountByOrgId(orgId, collectionName, attendanceManage, date));
        result.setRows(service.getUsersByOrgId(orgId, collectionName, attendanceManage, date, start, limit));
        return result;
    }
	
	@PostMapping("/getUsersCountByOrgId")
    public long getUsersCountByOrgId(
    		@RequestParam("orgId") String orgId,
    		@RequestParam("collectionName") String collectionName) {
        return service.getUsersCountByOrgId(orgId, collectionName, "", "");
    }
	
	/**
     * 查询一条记录
     * @param id
     * @param collectionName
     * @return
     */
    @PostMapping("/findById")
    public ResultMsg findDocById(@RequestParam("docId") String docId,@RequestParam("date") String date,
                                 @RequestParam("collectionName") String collectionName) {
        Document res = service.findDocumentById(docId, date, collectionName);
        return ResultMsg.getSuccess("查询完成", res);
    }
	
	
	@PostMapping("/findByUserId")
    public GridDto<Document> findAll(@RequestParam String collectionName,
                                     String name,
                                     String startUploadDate,
                                     String endUploadDate,
                                     String auditStatus,
                                     String userId,
                                     @RequestParam int start, @RequestParam int limit) {
        GridDto<Document> result = new GridDto<>();
        result.setResults(service.findAllDocumentCount(collectionName, name, startUploadDate, endUploadDate,auditStatus, userId));
        result.setRows(service.findAllDocument(collectionName, name, startUploadDate, endUploadDate,auditStatus, userId, start, limit));
        return result;
    }
	
	
	@PostMapping("/findAll")
    public GridDto<Document> findAll(@RequestParam String attendanceManageCollect,
									 @RequestParam String orgId,
									 @RequestParam int orgType,
                                     String startUploadDate,
                                     String endUploadDate,
                                     @RequestParam int start, @RequestParam int limit) {
        GridDto<Document> result = new GridDto<>();
        result.setResults(service.findAllDataCount(attendanceManageCollect, orgId, orgType, startUploadDate, endUploadDate));
        result.setRows(service.findAllData(attendanceManageCollect, orgId, orgType, startUploadDate, endUploadDate, start, limit));
        return result;
    }
	
	/**
	 * 新增一个考勤汇总表
	 * @param year 年份
	 * @param month 月份
	 * @param attendanceOrgName 考勤部门
	 * @param attendanceOrgId 考勤部门ID
	 * @param attendanceUserName 考勤人员
	 * @param attendanceUserId 考勤人员ID
	 * @param flowState 改考勤表状态
	 * @param attendanceManage 考勤打卡数据库表
	 * @param attendanceManageCollect 考勤汇总数据库表
	 * @param request
	 * @return ResultMsg
	 */
	@PostMapping("/addCollectDoc")
	public ResultMsg addDoc(
							@RequestParam(name = "year") String year,
							@RequestParam(name = "month") String month,
							@RequestParam(name = "orgType") String orgType,
							@RequestParam(name = "attendanceOrgName") String attendanceOrgName,
							@RequestParam(name = "attendanceOrgId") String attendanceOrgId,
    						@RequestParam(name = "attendanceUserName") String attendanceUserName,
    						@RequestParam(name = "attendanceUserId") String attendanceUserId,
                            @RequestParam(name = "flowState") String flowState,
                            @RequestParam(name = "attendanceManage") String attendanceManage,
                            @RequestParam(name = "attendanceManageCollect") String attendanceManageCollect,
                            String workshopQueryData,
                            HttpServletRequest request) {
		SimpleDateFormat sdfCreateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date currentDate = new Date();
        String currentDateStr = "";
        currentDateStr = sdfCreateTime.format(currentDate);
        
        String filePath = service.collectTable(year, month, orgType, attendanceOrgName, attendanceOrgId, attendanceManage , "userInfoManage");
        
        Document document = new Document();
        document.put("date", year+month);
        document.put("attendanceOrgName", attendanceOrgName);
        document.put("attendanceOrgId", attendanceOrgId);
        document.put("attendanceUserName", attendanceUserName);
        document.put("attendanceUserId", attendanceUserId);
        document.put("workshopQueryData", workshopQueryData);
        document.put("flowState", flowState);
        document.put("createTime", currentDateStr);
        document.put("filePath", filePath);
        Document res = service.addDocument(document, attendanceManageCollect);
        return ResultMsg.getSuccess("汇总成功", res);
	}
	
	@PostMapping("/updateCollectDoc")
	public ResultMsg updateCollectDoc(	
			@RequestParam("id") String id,
			@RequestParam(name = "attendanceManageCollect") String attendanceManageCollect,
			String workshopQueryData,
			String flowState,
			HttpServletRequest request) {
		Document doc = service.findDatasById(id,attendanceManageCollect);
		if(StringUtils.isNotBlank(workshopQueryData)){
			doc.put("workshopQueryData", workshopQueryData);
        }
		if(StringUtils.isNotBlank(flowState)){
			doc.put("flowState", flowState);
		}
		Document res = service.updateCollectDocument(doc, attendanceManageCollect);
		return ResultMsg.getSuccess("提交成功", res);
	}
	
	@PostMapping("/Import")
    public ResultMsg Import(
                            @RequestParam(name = "id") String id,
                            @RequestParam(name = "uploadFileArr") String uploadFileArr,
                            @RequestParam(name = "filePath") String filePath,
                            @RequestParam(name = "collectionName") String collectionName,
                            HttpServletRequest request) {
        Document doc = service.findDatasById(id,collectionName);
        DBObject uploadFile =(DBObject) JSON.parse(uploadFileArr);
//        doc.put("uploadFileArr", uploadFile);
        doc.put("filePath", filePath);
        Document res = service.updateCollectDocument(doc, collectionName);
        return ResultMsg.getSuccess("导入成功", res);
//        return ResultMsg.getSuccess("导入成功", null);
    }
	
	/**
	 * 车间回退工区
	 * @param id
	 * @param attendanceManageCollect
	 * @param workshopQueryData
	 * @param flowState
	 * @param request
	 * @return ResultMsg
	 */
	@PostMapping("/backCollectDoc")
	public ResultMsg backCollectDoc(	
			@RequestParam("id") String id,
			@RequestParam(name = "attendanceManageCollect") String attendanceManageCollect,
			String workshopQueryData,
			String flowState,
			HttpServletRequest request) {
		Document doc = service.findDatasById(id,attendanceManageCollect);
		doc.put("workshopQueryData", workshopQueryData);
		if(StringUtils.isNotBlank(flowState)){
			doc.put("flowState", flowState);
		}
		Document res = service.updateCollectDocument(doc, attendanceManageCollect);
		return ResultMsg.getSuccess("提交成功", res);
	}
	
	@PostMapping("/removeDoc")
    public ResultMsg removeDoc(@RequestParam("id") String id,
                               @RequestParam("collectionName") String collectionName) {
        List<String> ids = Arrays.asList(id.split(","));
        service.removeDocument(ids, collectionName);
        return ResultMsg.getSuccess("删除成功");
    }
	
	
	 @PostMapping("/updateDoc")
	    public ResultMsg updateDoc(	@RequestParam("id") String id,
	    		@RequestParam(name = "name") String name,
                @RequestParam(name = "depart") String depart,
                @RequestParam(name = "userId") String userId,
                @RequestParam(name = "userName") String userName,
                @RequestParam(name = "orgId") String orgId,
                @RequestParam(name = "orgName") String orgName,
                @RequestParam(name = "parentId") String parentId,
                @RequestParam(name = "flowState") String flowState,
                @RequestParam(name = "collectionName") String collectionName,
                @RequestParam(name = "uploadFileArr") String uploadFileArr,
					                HttpServletRequest request) {
	        Document doc = service.findDatasById(id,collectionName);
	        DBObject uploadFile =(DBObject) JSON.parse(uploadFileArr);
	        doc.put("uploadFileArr", uploadFile);
	        doc.put("name", name);
	        doc.put("depart", depart);
	        doc.put("userId", userId);
	        doc.put("depart", depart);
	        doc.put("userName", userName);
	        doc.put("orgId", orgId);
	        doc.put("orgName", orgName);
	        doc.put("parentId", parentId);
	        doc.put("auditStatus", flowState);
	        doc.put("safeAuditRemark", "");
	        doc.put("dispatchAuditRemark", "");
	        doc.put("leaderAuditRemark", "");
	        
	        Document res = service.updateDocument(doc, collectionName);
	        return ResultMsg.getSuccess("修改成功", res);
	    }
	

}
