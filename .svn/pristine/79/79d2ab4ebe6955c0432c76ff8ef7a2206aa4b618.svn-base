package com.enovell.yunwei.km_micor_service.service.productionManage.circuitWorkOrderManage;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
@Service("circuitWorkOrderWorkAreaReplyService")
public class CircuitWorkOrderWorkAreaReplyServiceImpl implements  CircuitWorkOrderWorkAreaReplyService{
	
	@Value("${spring.data.mongodb.host}")
    private String mongoHost;
    @Value("${spring.data.mongodb.port}")
    private int mongoPort;
    @Value("${spring.data.mongodb.database}")
    private String mongoDatabase;
    @Value("${user.uploadPath}")
    private String uploadPath;
    @Resource(name = "circuitWorkOrderApplyService")
    private CircuitWorkOrderApplyService circuitWorkOrderApplyService;
    @Resource(name = "circuitWorkOrderWorkshopReplyService")
    private CircuitWorkOrderWorkshopReplyService circuitWorkOrderWorkshopReplyService;

	@Override
	public long findAllDocumentCount(String collectionName, String docId,String executiveOrgId, String orgId, String currentDay, String workOrderName, String systemType, String flowState, String startUploadDate, String endUploadDate) {
		 try(MongoClient mc = new MongoClient(mongoHost,mongoPort)) {
	            MongoDatabase md = mc.getDatabase(mongoDatabase);
	            Bson filter = getFilter(docId, executiveOrgId, orgId, currentDay, workOrderName, systemType, flowState, startUploadDate, endUploadDate);
	            return  md.getCollection(collectionName).count(filter);
	        }
	}

	@Override
	public List<Document> findAllDocument(String collectionName, String docId,String executiveOrgId, String orgId, String currentDay, String workOrderName, String systemType, String flowState, String startUploadDate, String endUploadDate, int start, int limit) {
		 List<Document> results = new ArrayList<>();
	        try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
	            MongoDatabase md = mc.getDatabase(mongoDatabase);
	            Bson filter = getFilter(docId, executiveOrgId, orgId, currentDay, workOrderName, systemType, flowState, startUploadDate,endUploadDate);
	            FindIterable<Document> findIterable = md.getCollection(collectionName).find(filter).skip(start).limit(limit).sort(new Document("distributeDate", -1));
	            findIterable.forEach((Block<? super Document>) results::add);
	        }
	        results.stream().forEach(d-> {
	            d.append("docId",d.getString("docId"));
	            d.remove("_id");
	        });
	        return results;
	}

	@Override
	public Document findDocumentById(String id, String distributeOrgId, String collectionName) {
		try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
            MongoDatabase md = mc.getDatabase(mongoDatabase);
            FindIterable<Document> findIterable = md.getCollection(collectionName).find(new Document("docId", id).append("distributeOrgId", distributeOrgId).append("status",1));
            Document doc = findIterable.first();
            doc.append("docId",doc.getString("docId"));
            doc.remove("_id");
            return doc;
        }
	}

	@Override
	public Document updateDocument(Document doc, String collectionName, String flowState) {
		  try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
			  
	            MongoDatabase md = mc.getDatabase(mongoDatabase);
	            Bson filter =  Filters.eq("docId", doc.getString("docId"));
	            filter = Filters.and(filter,Filters.eq("distributeOrgId",doc.getString("distributeOrgId")));
	            return md.getCollection(collectionName)
	                    .findOneAndUpdate(
	                    		filter,new Document("$set",doc)
	                    );
	        }
	}

	/**
	 * 分页查询条件封装
	 * @param orgId 登录用户组织机构ID
	 * @param currentDay 当前日期字符串
	 * @param workOrderName 电路工单名称
	 * @param flowState 流程状态
	 * @param startUploadDate 开始时间
	 * @param endUploadDate 结束时间
	 * @return 查询条件 Bson
	 */
    private Bson getFilter(String docId,String executiveOrgId,String orgId, String currentDay, String workOrderName, String systemType, String flowState, String startUploadDate, String endUploadDate) {
        Bson filter = Filters.eq("status",1);
        if(StringUtils.isNotBlank(docId)){
        	filter = Filters.and(filter,Filters.eq("docId",docId));
        }
        if(StringUtils.isNotBlank(executiveOrgId)){
        	filter = Filters.and(filter,Filters.eq("executiveOrgId",executiveOrgId));
        }
        if(StringUtils.isNotBlank(workOrderName)){
        	filter = Filters.and(filter,Filters.regex("workOrderName",workOrderName));
        }
        if(StringUtils.isNotBlank(systemType)){
        	filter = Filters.and(filter,Filters.eq("systemType",systemType));
        }
        if(StringUtils.isNotBlank(flowState)){
        	filter = Filters.and(filter,Filters.eq("flowState",flowState));
        }
        if(StringUtils.isNotBlank(startUploadDate)){
            filter = Filters.and(filter,Filters.gte("distributeDate",startUploadDate));
        }
        if(StringUtils.isNotBlank(endUploadDate)){
            filter = Filters.and(filter,Filters.lte("distributeDate",endUploadDate));
        }
//        filter = Filters.and(filter,Filters.in("summaryDate",currentDay,""));//当前系统日期与汇总日期相同或者汇总日期为空
//        filter = Filters.and(filter,Filters.in("summaryPersonId",userId,""));//当前登陆用户ID与汇总人ID相同或者汇总人ID为空
//        filter = Filters.and(filter,Filters.eq("createUserId",userId));//表示查询的是当前登陆用户的数据
        
//        filter = Filters.and(filter,Filters.nin("flowState","0","1","2","3","4"));
//        filter = Filters.and(filter,Filters.in("flowState","5"));
        if(StringUtils.isNotBlank(orgId)){
        	filter = Filters.and(filter,Filters.eq("distributeOrgId",orgId));//当前登陆用户组织机构ID与该字段相同的
        }
        return filter;
    }

	@Override
	public void setFlowState(String docId, String executiveOrgId, String collectionName) {
		List<Document> results = new ArrayList<>();
        try(MongoClient mc = new MongoClient(mongoHost,mongoPort)){
            MongoDatabase md = mc.getDatabase(mongoDatabase);
            Bson filter = Filters.eq("status",1);
            filter = Filters.and(filter,Filters.eq("docId",docId));
//            Bson filter = getFilter(orgId, currentDay, workOrderName, flowState, startUploadDate,endUploadDate);
            FindIterable<Document> findIterable = md.getCollection(collectionName).find(filter);
            findIterable.forEach((Block<? super Document>) results::add);
        }
        results.stream().forEach(d-> {
            d.append("docId",d.getString("docId"));
            d.remove("_id");
        });
        
        int count = 0;
        for(int i = 0 ; i<results.size() ; i++){
        	String flowState = results.get(i).getString("flowState");
        	if("8".equals(flowState)){
        		count=count+1;
        	}
        }
        if(count==results.size()){
//        	for(int i = 0 ; i<results.size() ; i++){
//        		Document document = findDocumentById(results.get(i).getString("docId"),collectionName);
//        		document.put("flowState", "-1");
//        		updateDocument(document,collectionName,"");
//            }
        	Document document = circuitWorkOrderWorkshopReplyService.findDocumentById(results.get(0).getString("docId"),results.get(0).getString("executiveOrgId"),"circuitIssueWorkOrder");
        	document.put("flowState", "8");
        	circuitWorkOrderWorkshopReplyService.updateDocument(document, "circuitIssueWorkOrder", "8");
        	
        	circuitWorkOrderWorkshopReplyService.setFlowState(docId, "circuitIssueWorkOrder");
        }
		
	}
	
}